# Configuration file

##########################################################################################################
# basecosts
#--------------------------------------------------------------------------------------------------------#
# The base costs for all methods.
##########################################################################################################

basecosts {
    # canvas: function():table -- Get the 2D canvas for these glasses.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas#canvas(IModuleContainer)"=0

    # canvas3d: function():table -- Get the 3D canvas for these glasses.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas#canvas3d(IModuleContainer)"=0

    # clear: function() -- Remove all objects.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas#clear(ObjectGroup)"=0

    # remove: function() -- Remove this object from the canvas.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas#remove(BaseObject)"=0

    # addDot: function(position:table, [, color:number][, size:number]):table -- Create a new dot.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addDot(Group2D)"=0

    # addGroup: function(position:table):table -- Create a new object group.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addGroup(Group2D)"=0

    # addItem: function(position:table, item:string[, damage:int[, scale:number]]):table -- Create a item icon.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addItem(Group2D)"=0

    # addLine: function(start:table, end:table[, colour:int[, thickness:number]]):table -- Create a new line.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addLine(Group2D)"=0

    # addLines: function(points...:table, [, color:number[, thickness:number]]):table -- Create a new line loop, composed of many points.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addLines(Group2D)"=0

    # addPolygon: function(points...:table, [, color:number]):table -- Create a new polygon, composed of many points.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addPolygon(Group2D)"=0

    # addRectangle: function(x:number, y:number, width:number, height:number[, colour:int]):table -- Create a new rectangle.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addRectangle(Group2D)"=0

    # addText: function(position:table, contents:string[, colour:int[, size:number]]):table -- Create a new text object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addText(Group2D)"=0

    # addTriangle: function(p1:table, p2:table, p3:table[, colour:int]):table -- Create a new triangle, composed of three points.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#addTriangle(Group2D)"=0

    # getSize: function():number, number -- Get the size of this canvas.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas2D#getSize(Frame2D)"=0

    # addBox: function(x:number, y:number, z:number[, width:number, height:number, depth:number][, color:number]):table -- Create a new box.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas3D#addBox(Group3D)"=0

    # addFrame: function(position:table):table -- Create a new frame to put 2d objects in.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas3D#addFrame(Group3D)"=0

    # addItem: function(position:table, item:string[, damage:int[, scale:number]]):table -- Create a item model.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas3D#addItem(Group3D)"=0

    # addLine: function(start:table, end:table[, thickness:number[, colour:int]]):table -- Create a new line.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas3D#addLine(Group3D)"=0

    # create: function([offset:table]):table -- Create a new 3D canvas centred relative to the current position.
    I:"org.squiddev.plethora.gameplay.modules.glasses.methods.MethodsCanvas3D#create(Origin3D)"=0

    # getAlpha: function():int -- Get the alpha for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Colourable#getAlpha(Colourable)"=0

    # getColor: function():int -- Get the colour for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Colourable#getColour(Colourable)"=0

    # setAlpha: function(alpha:int) -- Set the alpha for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Colourable#setAlpha(Colourable)"=0

    # setColour: function(colour|r:int, [g:int, b:int], [alpha:int]):number -- Set the colour for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Colourable#setColour(Colourable)"=0

    # getItem: function(): string, number -- Get the item and damage value for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.ItemObject#getItem(ItemObject)"=0

    # setItem: function(item:string[, damage:int]) -- Set the item and damage value for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.ItemObject#setItem(ItemObject)"=0

    # getScale: function():number -- Get the scale for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Scalable#getScale(Scalable)"=0

    # setScale: function(scale:number) -- Set the scale for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.Scalable#setScale(Scalable)"=0

    # getLineHeight: function():int -- Get the line height for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#getLineHeight(TextObject)"=0

    # getText: function():string -- Get the text for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#getText(TextObject)"=0

    # hasShadow: function():boolean -- Get the shadow for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#hasShadow(TextObject)"=0

    # setLineHeight: function(lineHeight:int) -- Set the line height for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#setLineHeight(TextObject)"=0

    # setShadow: function(shadow:boolean) -- Set the shadow for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#setShadow(TextObject)"=0

    # setText: function(contents:string) -- Set the text for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.TextObject#setText(TextObject)"=0

    # getPoint: function(idx:int):number, number -- Get the specified vertex of this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.MultiPoint2D#getPoint(MultiPoint2D)"=0

    # setPoint: function(idx:int, x:number, y:number) -- Set the specified vertex of this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.MultiPoint2D#setPoint(MultiPoint2D)"=0

    # getPointCount: function():int -- Get the number of verticies on this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.MultiPointResizable2D#getPointCount(MultiPointResizable2D)"=0

    # insertPoint: function([idx:int, ]x:number, y:number) -- Add a specified vertex to this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.MultiPointResizable2D#insertPoint(MultiPointResizable2D)"=0

    # removePoint: function(idx:int) -- Remove the specified vertex of this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.MultiPointResizable2D#removePoint(MultiPointResizable2D)"=0

    # getPosition: function():number, number -- Get the position for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.Positionable2D#getPosition(Positionable2D)"=0

    # setPosition: function(x:number, y:number) -- Set the position for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.Positionable2D#setPosition(Positionable2D)"=0

    # getSize: function():number, number -- Get the size of this rectangle.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.Rectangle#getSize(Rectangle)"=0

    # setSize: function(width:number, height:number) -- Set the size of this rectangle.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object2d.Rectangle#setSize(Rectangle)"=0

    # getSize: function():number, number, number -- Get the size of this box.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Box#getSize(Box)"=0

    # setSize: function(width:number, height:number, depth:number) -- Set the size of this box.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Box#setSize(Box)"=0

    # isDepthTested: function():boolean -- Determine whether depth testing is enabled for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.DepthTestable#isDepthTested(DepthTestable)"=0

    # setDepthTested: function(depthTest:boolean) -- Set whether depth testing is enabled for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.DepthTestable#setDepthTested(DepthTestable)"=0

    # getPoint: function(idx:int):number, number, number -- Get the specified vertex of this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.MultiPoint3D#getPoint(MultiPoint3D)"=0

    # setPoint: function(idx:int, x:number, y:number, z:number) -- Set the specified vertex of this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.MultiPoint3D#setPoint(MultiPoint3D)"=0

    # recenter: function([offset:table]) -- Recenter this canvas relative to the current position.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.ObjectRoot3D#recenter(ObjectRoot3D)"=0

    # getPosition: function():number, number, number -- Get the position for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Positionable3D#getPosition(Positionable3D)"=0

    # setPosition: function(x:number, y:number, z:number) -- Set the position for this object.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Positionable3D#setPosition(Positionable3D)"=0

    # getRotation: function():nil|number, number, number -- Get the rotation for this object, or nil if it faces the player.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Rotatable3D#getRotation(Rotatable3D)"=0

    # setRotation: function([x:number, y:number, z:number]) -- Set the rotation for this object, passing nothing if it should face the player.
    I:"org.squiddev.plethora.gameplay.modules.glasses.objects.object3d.Rotatable3D#setRotation(Rotatable3D)"=0

    # capture: function(pattern:string) -- Capture all chat messages matching a Lua pattern, preventing them from being said.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat#capture(IModuleContainer)"=0

    # clearCaptures: function() -- Remove all listeners added by capture().
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat#clearCaptures(IModuleContainer)"=0

    # say: function(message:string) -- Send a message to everyone
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat#say(IModuleContainer)"=0

    # tell: function(message:string) -- Send a message to yourself
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat#tell(IModuleContainer)"=0

    # uncapture: function(pattern:string):boolean -- Remove a capture added by capture(pattern).
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat#uncapture(IModuleContainer)"=0

    # capture: function(pattern:string) -- Capture all chat messages matching a Lua pattern, preventing them from being said.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChatCreative#capture(IModuleContainer)"=0

    # clearCaptures: function() -- Remove all listeners added by capture().
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChatCreative#clearCaptures(IModuleContainer)"=0

    # say: function(message:string) -- Send a message to everyone
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChatCreative#say(IModuleContainer)"=0

    # uncapture: function(pattern:string):boolean -- Remove a capture added by capture(pattern).
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChatCreative#uncapture(IModuleContainer)"=0

    # getID: function():string -- Get this entity's UUID.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection#getID(IModuleContainer)"=0

    # getMetaOwner: function():table -- Get this entity's UUID.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection#getMetaOwner(IModuleContainer)"=0

    # getName: function():string -- Get this entity's name.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection#getName(IModuleContainer)"=0

    # fire: function(yaw:number, pitch:number, potency:number) -- Fire a laser in a set direction
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsLaser#fire"=0

    # getBlockMeta: function(x:int, y:int, z:int):table -- Get metadata about a nearby block
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner#getBlockMeta(IModuleContainer)"=0

    # scan: function():table -- Scan all blocks in the vicinity
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner#scan(IModuleContainer)"=0

    # getMetaByID: function(id:string):table|nil -- Find a nearby entity by UUID
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor#getMetaByID(IModuleContainer)"=0

    # getMetaByName: function(name:string):table|nil -- Find a nearby entity by name
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor#getMetaByName(IModuleContainer)"=0

    # sense: function():table -- Scan for entities in the vicinity
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor#sense(IModuleContainer)"=0

    # getMetadata: function():table -- Get metadata about this object
    I:org.squiddev.plethora.integration.MethodMeta=0

    # getTransferLocations: function([location:string]):table -- Get a list of all available objects which can be transferred to or from
    I:org.squiddev.plethora.integration.MethodTransferLocations=0

    # filterModules: function(names:string...):table|nil -- Gets the methods which require these modules
    I:"org.squiddev.plethora.integration.MethodsCore#filterModules(IModuleContainer)"=0

    # getDocs: function([name: string]):string|table -- Get the documentation for all functions or the function specified. Errors if the function cannot be found.
    I:"org.squiddev.plethora.integration.MethodsCore#getDocs(IMethodCollection)"=0

    # hasModule: function(module:string):boolean -- Checks whether a module is available
    I:"org.squiddev.plethora.integration.MethodsCore#hasModule(IModuleContainer)"=0

    # listModules: function():table -- Lists all modules available
    I:"org.squiddev.plethora.integration.MethodsCore#listModules(IModuleContainer)"=0

    # getBaubles: function():table -- Get this player's baubles inventory
    I:"org.squiddev.plethora.integration.baubles.MethodIntrospectionBaublesInventory#getBaubles(IModuleContainer)"=0

    # getSlottedPart: function(slot:string):table -- Get a reference to the part in the specified slot.
    I:"org.squiddev.plethora.integration.cbmp.MethodsMultipart#getSlottedPart(TileMultipart)"=0

    # getSlottedPartMeta: function(slot:string):table|nil -- Get the metadata of the part in the specified slot.
    I:"org.squiddev.plethora.integration.cbmp.MethodsMultipart#getSlottedPartMeta(TileMultipart)"=0

    # listParts: function():table -- Get a list of all parts in the multipart.
    I:"org.squiddev.plethora.integration.cbmp.MethodsMultipart#listParts(TileMultipart)"=0

    # listSlottedParts: function():table -- Get a lookup of slot to parts.
    I:"org.squiddev.plethora.integration.cbmp.MethodsMultipart#listSlottedParts(TileMultipart)"=0

    # getInventory: function():table -- Get this turtle's inventory
    I:"org.squiddev.plethora.integration.computercraft.MethodsIntrospectionTurtle#getInventory(IModuleContainer)"=0

    # swing: function():boolean, string|nil -- Left click with this item. Returns the action taken.
    I:"org.squiddev.plethora.integration.computercraft.MethodsKineticTurtle#swing(IModuleContainer)"=0

    # use: function([duration:integer]):boolean, string|nil -- Right click with this item. The duration is in ticks, or 1/20th of a second.
    I:"org.squiddev.plethora.integration.computercraft.MethodsKineticTurtle#use(IModuleContainer)"=0

    # getMutationsList: function(root:string):table -- Get a list of all mutations in the given species root
    I:"org.squiddev.plethora.integration.forestry.MethodsAnalyzer#getMutationsList(IModuleContainer)"=0

    # getSpeciesList: function(root:string):table -- Get a list of all species in the given species root
    I:"org.squiddev.plethora.integration.forestry.MethodsAnalyzer#getSpeciesList(IModuleContainer)"=0

    # getSpeciesRoots: function():table -- Get a list of all species roots
    I:"org.squiddev.plethora.integration.forestry.MethodsAnalyzer#getSpeciesRoots(IModuleContainer)"=0

    # getDrone: function():table|nil -- Get the current drone for this bee housing.
    I:"org.squiddev.plethora.integration.forestry.MethodsBeeHousing#getDrone(IBeeHousing)"=0

    # getHumidity: function():string -- Get the temperature of this bee housing.
    I:"org.squiddev.plethora.integration.forestry.MethodsBeeHousing#getHumidity(IBeeHousing)"=0

    # getQueen: function():table|nil -- Get the current queen for this bee housing.
    I:"org.squiddev.plethora.integration.forestry.MethodsBeeHousing#getQueen(IBeeHousing)"=0

    # getTemperature: function():string -- Get the temperature of this bee housing.
    I:"org.squiddev.plethora.integration.forestry.MethodsBeeHousing#getTemperature(IBeeHousing)"=0

    # getErrors: function():table -- Get any errors preventing operation
    I:"org.squiddev.plethora.integration.forestry.MethodsErrorLogicSource#getErrors(IErrorLogicSource)"=0

    # getConductionLoss: function():number -- The EU loss for this conductor
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getConductionLoss(IEnergyConductor)"=0

    # getConductorBreakdownEnergy: function():number -- Amount of EU the the conductor will handle before it melts
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getConductorBreakdownEnergy(IEnergyConductor)"=0

    # getDemandedEnergy: function():number -- The maximum amount of EU that can be received
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getDemandedEnergy(IEnergySink)"=0

    # getEUCapacity: function():int -- The maximum amount of EU that can be stored
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getEUCapacity(IEnergyStorage)"=0

    # getEUOutput: function():number -- The maximum EU output per tick
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getEUOutput(IEnergyStorage)"=0

    # getEUStored: function():int -- The amount of EU currently stored
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getEUStored(IEnergyStorage)"=0

    # getEuCapacity: function():number -- The maximum amount of EU that can be stored.
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getEuCapacity(ItemStack)"=0

    # getEuStored: function():number -- The amount of EU currently stored.
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getEuStored(ItemStack)"=0

    # getInsulationBreakdownEnergy: function():number -- Amount of EU the insulation will handle before it is destroyed
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getInsulationBreakdownEnergy(IEnergyConductor)"=0

    # getInsulationEnergyAbsorption: function():number -- Amount of EU the insulation can handle before shocking players
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getInsulationEnergyAbsorption(IEnergyConductor)"=0

    # getOfferedEnergy: function():number -- EU output provided per tick
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getOfferedEnergy(IEnergySource)"=0

    # getSinkTier: function():int -- The tier of this EU sink. 1 = LV, 2 = MV, 3 = HV, 4 = EV etc.
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getSinkTier(IEnergySink)"=0

    # getSourceTier: function():int -- The tier of this EU source. 1 = LV, 2 = MV, 3 = HV, 4 = EV etc.
    I:"org.squiddev.plethora.integration.ic2.MethodsEnergy#getSourceTier(IEnergySource)"=0

    # getReactorCore: function():table -- Get a reference to the reactor's core
    I:"org.squiddev.plethora.integration.ic2.MethodsReactor#getReactorCore(IReactorChamber)"=0

    # craft: function(count:int):boolean, table -- Craft this item, returning if the item could be crafted and a reference to the crafting task.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodCraftItem#craft(NullableItemStack)"=0

    # export: function(toName:string[, limit:int[, toSlot:int]]):int -- Export this item from the RS network to an inventory. Returns the amount transferred.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodExportItem#export(NullableItemStack)"=0

    # getComponents: function():table -- Get the various items required for this task.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsCraftingTask#getComponents(ICraftingTask)"=0

    # getMissing: function():table -- Get the items which are missing for this task.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsCraftingTask#getMissing(ICraftingTask)"=0

    # getMissingFluids: function():table -- Get the fludis which are missing for this task.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsCraftingTask#getMissingFluids(ICraftingTask)"=0

    # getPattern: function():table -- Get the main pattern for this task.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsCraftingTask#getPattern(ICraftingTask)"=0

    # isFinished: function():boolean -- Check if this task has finished.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsCraftingTask#isFinished(ICraftingTask)"=0

    # findItem: function(item:string|table):table -- Search for an item in the network. You can specify the item as a string, with or without the damage value ('minecraft:stone' or 'minecraft:stone@0') or as a table with 'name', 'damage' and 'nbthash' fields. You must specify the 'name', but you can leave the other fields empty.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsNetworkNode#findItem(INetworkNode)"=0

    # findItems: function(item:string|table):table -- Search all items in the network. You can specify the item as a string, with or without the damage value ('minecraft:stone' or 'minecraft:stone@0') or as a table with 'name', 'damage' and 'nbthash' fields. You must specify the 'name', but you can leave the other fields empty.
    I:"org.squiddev.plethora.integration.refinedstorage.MethodsNetworkNode#findItems(INetworkNode)"=0

    # getCraftingTasks: function():t